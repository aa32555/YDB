#################################################################
#								#
# Copyright (c) 2007-2015 Fidelity National Information 	#
# Services, Inc. and/or its subsidiaries. All rights reserved.	#
#								#
# Copyright (c) 2018 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

#-----------------------------------------------
# Mumps error condition handler macros
#-----------------------------------------------
.ifdef cygwin
# This is provisionally bumped up by 8. It needs be be verified on a 64-bit cygwin computer
chnd_size	=	288
.else
chnd_size	=	232
.endif

chnd_save_active =	0
chnd_ch_active	=	8
chnd_ch		=	16
chnd_jmp	=	24

	.include "gtm_threadgbl_deftypes_asm.si"

	.data
	.extern	ctxt
	.extern gtm_threadgbl

	.text
	.extern gtm_asm_establish

.ifdef __APPLE__
.macro SIGSETJMP
	call sigsetjmp
	incl %eax
.endm
.else
.macro SIGSETJMP
	call 	__sigsetjmp@PLT
	cmp	$0,%eax				# Which return is this?
.endm
.endif

.macro ESTABLISH labelend, labelskip
        call	gtm_asm_establish
	movq	ctxt(%rip), %rax
	leaq	mdb_condition_handler(%rip), %r11
	movq    %r11, chnd_ch(%rax)		# ctxt->ch = x
	addq	$chnd_jmp, %rax			# setjmp(ctxt->jmp)
	movq	$0, %rsi
	movq	%rax, %rdi
	SIGSETJMP
	je	\labelend
	# This is the return when an error was unwound. Need to reduce rts_error_depth before doing anything else
	movq	gtm_threadgbl(%rip), %r11	# %r10 contains threadgbl base
	movl	ggo_rts_error_depth(%r11), %eax
	cmp	$0, %eax
	je	\labelskip
	subl	$1, %eax
	movl	%eax, ggo_rts_error_depth(%r11)
\labelskip:
	# This is checking for MUM_TSTART returns in which case we don't jump to "return" (outside this macro) but
	# rather just exit the ESTABLISH macro and continue as if the ESTABLISH had just been done.
	incl  	%eax
	jne  	\labelend
	REVERT
	jmp  	return
\labelend:
.endm

.macro REVERT
	movq	ctxt(%rip), %rax		# active_ch = ctxt->save_active_c
	movq	chnd_save_active(%rax), %rax
	movq	%rax, active_ch(%rip)
	subq  	$chnd_size, ctxt(%rip)		# ctxt--
.endm
